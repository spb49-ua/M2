diary off
syms x
syms y
diary off
y=x^3
 
y =
 
x^3
 
plot(y,[-2,2])
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Data must be numeric, datetime, duration or an array convertible
to double.
} 
plot(y)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Data must be numeric, datetime, duration or an array convertible
to double.
} 
help plot
 <strong>plot</strong>   Linear plot. 
    <strong>plot</strong>(X,Y) plots vector Y versus vector X. If X or Y is a matrix,
    then the vector is plotted versus the rows or columns of the matrix,
    whichever line up.  If X is a scalar and Y is a vector, disconnected
    line objects are created and plotted as discrete points vertically at
    X.
 
    <strong>plot</strong>(Y) plots the columns of Y versus their index.
    If Y is complex, <strong>plot</strong>(Y) is equivalent to <strong>plot</strong>(real(Y),imag(Y)).
    In all other uses of <strong>plot</strong>, the imaginary part is ignored.
 
    Various line types, plot symbols and colors may be obtained with
    <strong>plot</strong>(X,Y,S) where S is a character string made from one element
    from any or all the following 3 columns:
 
           b     blue          .     point              -     solid
           g     green         o     circle             :     dotted
           r     red           x     x-mark             -.    dashdot 
           c     cyan          +     plus               --    dashed   
           m     magenta       *     star             (none)  no line
           y     yellow        s     square
           k     black         d     diamond
           w     white         v     triangle (down)
                               ^     triangle (up)
                               <     triangle (left)
                               >     triangle (right)
                               p     pentagram
                               h     hexagram
                          
    For example, <strong>plot</strong>(X,Y,'c+:') plots a cyan dotted line with a plus 
    at each data point; <strong>plot</strong>(X,Y,'bd') plots blue diamond at each data 
    point but does not draw any line.
 
    <strong>plot</strong>(X1,Y1,S1,X2,Y2,S2,X3,Y3,S3,...) combines the plots defined by
    the (X,Y,S) triples, where the X's and Y's are vectors or matrices 
    and the S's are strings.  
 
    For example, <strong>plot</strong>(X,Y,'y-',X,Y,'go') plots the data twice, with a
    solid yellow line interpolating green circles at the data points.
 
    The <strong>plot</strong> command, if no color is specified, makes automatic use of
    the colors specified by the axes ColorOrder property.  By default,
    <strong>plot</strong> cycles through the colors in the ColorOrder property.  For
    monochrome systems, <strong>plot</strong> cycles over the axes LineStyleOrder property.
 
    Note that RGB colors in the ColorOrder property may differ from
    similarly-named colors in the (X,Y,S) triples.  For example, the 
    second axes ColorOrder property is medium green with RGB [0 .5 0],
    while <strong>plot</strong>(X,Y,'g') plots a green line with RGB [0 1 0].
 
    If you do not specify a marker type, <strong>plot</strong> uses no marker. 
    If you do not specify a line style, <strong>plot</strong> uses a solid line.
 
    <strong>plot</strong>(AX,...) plots into the axes with handle AX.
 
    <strong>plot</strong> returns a column vector of handles to lineseries objects, one
    handle per plotted line. 
 
    The X,Y pairs, or X,Y,S triples, can be followed by 
    parameter/value pairs to specify additional properties 
    of the lines. For example, <strong>plot</strong>(X,Y,'LineWidth',2,'Color',[.6 0 0]) 
    will create a plot with a dark red line width of 2 points.
 
    Example
       x = -pi:pi/10:pi;
       y = tan(sin(x)) - sin(tan(x));
       plot(x,y,'--rs','LineWidth',2,...
                       'MarkerEdgeColor','k',...
                       'MarkerFaceColor','g',...
                       'MarkerSize',10)
 
    See also <a href="matlab:help plottools">plottools</a>, <a href="matlab:help semilogx">semilogx</a>, <a href="matlab:help semilogy">semilogy</a>, <a href="matlab:help loglog">loglog</a>, <a href="matlab:help plotyy">plotyy</a>, <a href="matlab:help plot3">plot3</a>, <a href="matlab:help grid">grid</a>,
    <a href="matlab:help title">title</a>, <a href="matlab:help xlabel">xlabel</a>, <a href="matlab:help ylabel">ylabel</a>, <a href="matlab:help axis">axis</a>, <a href="matlab:help axes">axes</a>, <a href="matlab:help hold">hold</a>, <a href="matlab:help legend">legend</a>, <a href="matlab:help subplot">subplot</a>, <a href="matlab:help scatter">scatter</a>.

    <a href="matlab:doc plot">Reference page for plot</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('plot')">Other functions named plot</a>

plot(x,y,[-2,2])
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('plot')" style="font-weight:bold">plot</a>
Data must be numeric, datetime, duration or an array convertible to double.
} 
fplot(x,y,[-2,2])
hold on
y=x^2+1
 
y =
 
x^2 + 1
 
fplot(x,y,[-2,2])
subplot[2,1,1];fplot(x,y,[-2,2])
 subplot[2,1,1];fplot(x,y,[-2,2])
        
{Error: Invalid expression. When calling a function or indexing a variable,
use parentheses. Otherwise, check for mismatched delimiters.
} 
subplot(2,1,1);fplot(x,y,[-2,2])
y=x^3
 
y =
 
x^3
 
subplot(2,1,2);fplot(x,y,[-2,2])
help ezplot
 <strong>ezplot</strong>   (NOT RECOMMENDED) Easy to use function plotter
 
  ==========================================================
  <strong>ezplot</strong> is not recommended. Use FPLOT or FIMPLICIT instead.
  ==========================================================
 
    <strong>ezplot</strong>(FUN) plots the function FUN(X) over the default domain
    -2*PI < X < 2*PI, where FUN(X) is an explicitly defined function of X.
 
    <strong>ezplot</strong>(FUN2) plots the implicitly defined function FUN2(X,Y) = 0 over
    the default domain -2*PI < X < 2*PI and -2*PI < Y < 2*PI.
 
    <strong>ezplot</strong>(FUN,[A,B]) plots FUN(X) over A < X < B.
    <strong>ezplot</strong>(FUN2,[A,B]) plots FUN2(X,Y) = 0 over A < X < B and A < Y < B.
 
    <strong>ezplot</strong>(FUN2,[XMIN,XMAX,YMIN,YMAX]) plots FUN2(X,Y) = 0 over
    XMIN < X < XMAX and YMIN < Y < YMAX.
 
    <strong>ezplot</strong>(FUNX,FUNY) plots the parametrically defined planar curve FUNX(T)
    and FUNY(T) over the default domain 0 < T < 2*PI.
 
    <strong>ezplot</strong>(FUNX,FUNY,[TMIN,TMAX]) plots FUNX(T) and FUNY(T) over
    TMIN < T < TMAX.
 
    <strong>ezplot</strong>(FUN,[A,B],FIG), <strong>ezplot</strong>(FUN2,[XMIN,XMAX,YMIN,YMAX],FIG), or
    <strong>ezplot</strong>(FUNX,FUNY,[TMIN,TMAX],FIG) plots the function over the
    specified domain in the figure window FIG.
 
    <strong>ezplot</strong>(AX,...) plots into AX instead of GCA or FIG.
 
    H = <strong>ezplot</strong>(...) returns handles to the plotted objects in H.
 
    Examples:
    The easiest way to express a function is via a string:
       ezplot('x^2 - 2*x + 1')
 
    One programming technique is to vectorize the string expression using
    the array operators .* (TIMES), ./ (RDIVIDE), .\ (LDIVIDE), .^ (POWER).
    This makes the algorithm more efficient since it can perform multiple
    function evaluations at once.
       ezplot('x.*y + x.^2 - y.^2 - 1')
 
    You may also use a function handle to an existing function. Function
    handles are more powerful and efficient than string expressions.
       ezplot(@humps)
       ezplot(@cos,@sin)
 
    <strong>ezplot</strong> plots the variables in string expressions alphabetically.
       subplot(1,2,1), ezplot('1./z - log(z) + log(-1+z) + t - 1')
    To avoid this ambiguity, specify the order with an anonymous function:
       subplot(1,2,2), ezplot(@(z,t)1./z - log(z) + log(-1+z) + t - 1)
 
    If your function has additional parameters, for example k in myfun:
       %-----------------------%
       function z = myfun(x,y,k)
       z = x.^k - y.^k - 1;
       %-----------------------%
    then you may use an anonymous function to specify that parameter:
       ezplot(@(x,y)myfun(x,y,2))
 
    See also <a href="matlab:help ezcontour">ezcontour</a>, <a href="matlab:help ezcontourf">ezcontourf</a>, <a href="matlab:help ezmesh">ezmesh</a>, <a href="matlab:help ezmeshc">ezmeshc</a>, <a href="matlab:help ezplot3">ezplot3</a>, <a href="matlab:help ezpolar">ezpolar</a>,
             <a href="matlab:help ezsurf">ezsurf</a>, <a href="matlab:help ezsurfc">ezsurfc</a>, <a href="matlab:help plot">plot</a>, <a href="matlab:help vectorize">vectorize</a>, <a href="matlab:help function_handle">function_handle</a>.

    <a href="matlab:doc ezplot">Reference page for ezplot</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('ezplot')">Other functions named ezplot</a>

help cos
 <strong>cos</strong>    Cosine of argument in radians.
    <strong>cos</strong>(X) is the cosine of the elements of X. 
 
    See also <a href="matlab:help acos">acos</a>, <a href="matlab:help cosd">cosd</a>, <a href="matlab:help cospi">cospi</a>.

    <a href="matlab:doc matlab/cos">Reference page for matlab/cos</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('cos')">Other functions named cos</a>

fplot(cos)
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cos')" style="font-weight:bold">cos</a>
Not enough input arguments.
} 
fplot(cos())
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cos')" style="font-weight:bold">cos</a>
Not enough input arguments.
} 
fplot(cos(),[-3*pi,pi])
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cos')" style="font-weight:bold">cos</a>
Not enough input arguments.
} 
help cos
 <strong>cos</strong>    Cosine of argument in radians.
    <strong>cos</strong>(X) is the cosine of the elements of X. 
 
    See also <a href="matlab:help acos">acos</a>, <a href="matlab:help cosd">cosd</a>, <a href="matlab:help cospi">cospi</a>.

    <a href="matlab:doc matlab/cos">Reference page for matlab/cos</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('cos')">Other functions named cos</a>

help acos
 <strong>acos</strong>   Inverse cosine, result in radians.
    <strong>acos</strong>(X) is the arccosine of the elements of X. Complex
    results are obtained if ABS(x) > 1.0 for some element.
 
    See also <a href="matlab:help cos">cos</a>, <a href="matlab:help acosd">acosd</a>.

    <a href="matlab:doc acos">Reference page for acos</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('acos')">Other functions named acos</a>

help cospi
 <strong>cospi</strong>   Compute cos(X*pi) accurately.
    <strong>cospi</strong>(X) computes cos(X*pi) without explicitly computing X*pi.
    For odd integers n, cospi(n/2) is exactly zero, whereas cos(n*pi/2)
    reflects the accuracy of the floating point value for pi.
 
    Class support for input X:
       float: double, single
 
    See also <a href="matlab:help cos">cos</a>.

    <a href="matlab:doc cospi">Reference page for cospi</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('cospi')">Other functions named cospi</a>

fplot(cospi(),[-3*pi,pi])
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cospi')" style="font-weight:bold">cospi</a>
Not enough input arguments.
} 
plot(cospi(),[-3*pi,pi])
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cospi')" style="font-weight:bold">cospi</a>
Not enough input arguments.
} 
fplot(cospi(),[-3*pi,pi])
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cospi')" style="font-weight:bold">cospi</a>
Not enough input arguments.
} 
ezplot(cospi())
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('cospi')" style="font-weight:bold">cospi</a>
Not enough input arguments.
} 
ezplot(@(x)cos(x),[-3*pi,pi])
M=[1:3,4:6]

M =

     1     2     3     4     5     6

M=[1:3;4:6]

M =

     1     2     3
     4     5     6

help size
 <strong>size</strong>   Size of array.  
    D = <strong>size</strong>(X), for M-by-N matrix X, returns the two-element row vector
    D = [M,N] containing the number of rows and columns in the matrix.
    For N-D arrays, <strong>size</strong>(X) returns a 1-by-N vector of dimension lengths.
    Trailing singleton dimensions are ignored.
 
    [M,N] = <strong>size</strong>(X) for matrix X, returns the number of rows and columns in
    X as separate output variables. 
    
    [M1,M2,M3,...,MN] = <strong>size</strong>(X) for N>1 returns the sizes of the first N 
    dimensions of the array X.  If the number of output arguments N does
    not equal NDIMS(X), then for:
 
    N > NDIMS(X), <strong>size</strong> returns ones in the "extra" variables, i.e., outputs
                  NDIMS(X)+1 through N.
    N < NDIMS(X), MN contains the product of the sizes of dimensions N
                  through NDIMS(X).
 
    M = <strong>size</strong>(X,DIM) returns the length of the dimension specified
    by the scalar DIM.  For example, <strong>size</strong>(X,1) returns the number
    of rows. If DIM > NDIMS(X), M will be 1.
 
    When <strong>size</strong> is applied to a Java array, the number of rows
    returned is the length of the Java array and the number of columns
    is always 1.  When <strong>size</strong> is applied to a Java array of arrays, the
    result describes only the top level array in the array of arrays.
 
    Example:
    If
       X = rand(2,3,4);
    then
       d = size(X)              returns  d = [2 3 4]
       [m1,m2,m3,m4] = size(X)  returns  m1 = 2, m2 = 3, m3 = 4, m4 = 1
       [m,n] = size(X)          returns  m = 2, n = 12
       m2 = size(X,2)           returns  m2 = 3
 
    See also <a href="matlab:help length">length</a>, <a href="matlab:help ndims">ndims</a>, <a href="matlab:help numel">numel</a>.

    <a href="matlab:doc size">Reference page for size</a>
    <a href="matlab:matlab.internal.language.introspective.overloads.displayOverloads('size')">Other functions named size</a>

tam=size(M)

tam =

     2     3

zeros(tam)

ans =

     0     0     0
     0     0     0

v1=[1 2] ; v2= [2 3]

v2 =

     2     3

help add
--- help for <strong>hgbin/add</strong> ---

 <strong>hgbin/add</strong> Add method for hgbin object
    This file is an internal helper function for plot annotation.

v1 + v2

ans =

     3     5

v1 - v2

ans =

    -1    -1

v1^2
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mpower', 'C:\Program Files\MATLAB\R2019a\toolbox\matlab\ops\mpower.m', 51)" style="font-weight:bold"> ^ </a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2019a\toolbox\matlab\ops\mpower.m',51,0)">line 51</a>)
Incorrect dimensions for raising a matrix to a power. Check that the matrix
is square and the power is a scalar. To perform elementwise matrix powers,
use '.^'.
} 
(v1)^2
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mpower', 'C:\Program Files\MATLAB\R2019a\toolbox\matlab\ops\mpower.m', 51)" style="font-weight:bold"> ^ </a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2019a\toolbox\matlab\ops\mpower.m',51,0)">line 51</a>)
Incorrect dimensions for raising a matrix to a power. Check that the matrix
is square and the power is a scalar. To perform elementwise matrix powers,
use '.^'.
} 
(v1).^2

ans =

     1     4

(v2).^2

ans =

     4     9

v2.^2

ans =

     4     9

v1 * v2
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mtimes')" style="font-weight:bold"> * </a>
Incorrect dimensions for matrix multiplication. Check that the number of
columns in the first matrix matches the number of rows in the second matrix.
To perform elementwise multiplication, use '.*'.
} 
v1 .* v2

ans =

     2     6

v1 ./ v2

ans =

    0.5000    0.6667

syms (x^2 +y^2 - 1)^3 -x^2*y^3 
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('syms', 'C:\Program Files\MATLAB\R2019a\toolbox\symbolic\symbolic\syms.m', 137)" style="font-weight:bold">syms</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2019a\toolbox\symbolic\symbolic\syms.m',137,0)">line 137</a>)
Using input and output arguments simultaneously is not supported.
} 
syms f
f=  (x^2 +y^2 - 1)^3 -x^2*y^3
 
f =
 
(x^6 + x^2 - 1)^3 - x^11
 
diary off
